class Node():
  def __init__(self,data):
    self.data = data
    self.nextNode = None

class LinkedList():
  def __init__(self):
    self.head = None
    self.size = 0

  def insertAtfirst(self,data):
    self.size += 1
    newNode = Node(data)
    if not self.head:
      self.head = newNode
    else:
      newNode.nextNode = self.head
      self.head = newNode

  def insertAtend(self,data):
    self.size += 1
    newNode = Node(data)
    actualNode = self.head
    while actualNode.nextNode is not None:
      actualNode=actualNode.nextNode
    actualNode.nextNode = newNode

  def remove(self,data):
    if self.head is None: return
    self.size -= 1
    currentNode = self.head
    previousNode = None
    while currentNode.data != data:
      previousNode = currentNode
      currentNode = currentNode.nextNode
    if previousNode is None:
      self.head = currentNode.nextNode
    else:
      previousNode.nextNode = currentNode.nextNode
      
  def size1(self):
    return self.size

  def printList(self):
    actualNode = self.head
    while actualNode is not None:
      print(actualNode.data)
      actualNode = actualNode.nextNode

l1 = LinkedList()
l1.insertAtfirst(10)
l1.insertAtfirst(11)
l1.printList()
l1.insertAtend(12)
l1.printList()
l1.remove(10)
l1.printList()
print(l1.size1())